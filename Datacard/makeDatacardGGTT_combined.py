from ast import excepthandler
import sys
from commonObjects import lumiMap
import os
import json

DO_SYST = True
RES_BKG = False

def loadSystematics(systematics_loc, year, SR, m):
  mx = int(m.split("my")[0].split("mx")[1])
  my = int(m.split("my")[1])
  mass = "%d_%d"%(mx, my)
  with open(os.path.join(systematics_loc, "systematics.json"), "r") as f:
    systematics = json.load(f)[str(year)][str(SR)][mass]

  new_systematics = {}
  nuisance_names = []

  for key in systematics.keys():
    if key == "interpolation": continue
    if "const" in key:
      nuisance_names.append(key.split("_")[2])
      continue

    if "_left" in key or "_right" in key:
      key = key.split("_left")[0].split("_right")[0]

      value1 = "%.4f"%systematics[key+"_left"]
      value2 = "%.4f"%systematics[key+"_right"]
      if value1 == value2 == "1.0000":
        value = "-"
      else:
        value = "%s/%s"%(value1, value2)
    else:
      value = "%.4f"%systematics[key]
      if value == "1.0000":
        value = "-"
      key = key + "_%d"%year

    new_systematics[key] = value
  return new_systematics, list(set(nuisance_names))

def getYield(systematics, year, SR, sys_name):
  if sys_name in systematics[year][SR]:
    return systematics[year][SR][sys_name]
  elif sys_name.split("_")[-1][:3] == "201": #if systematic is missing because looking for a systematic for a different year
    return "-"
  else:
    raise Exception("%s systematic is missing from year %d SR %d"%(sys_name, year, SR))

header="""
CMS HGG Datacard - 2018 - 13TeV
Auto-generated by flashggFinalFits/Datacard/makeDatacardGGTT.py
Run with: combine
---------------------------------------------
imax *
jmax *
kmax *
---------------------------------------------

"""

systematics_loc = sys.argv[1]
nCats = int(sys.argv[2])
#nCats = 2
m = sys.argv[3]

sig_shape_template="""
shapes      ggttres%(m)s_%(year)s_hgg         ggttres%(m)scat%(catnum)s        ./Models/signal/sig_%(year)s_cat%(catnum)s.root wsig_13TeV:sig_%(year)s_cat%(catnum)s"""
if RES_BKG:
  sig_shape_template += "\nshapes      res_bkg_%(year)s                       ggttres%(m)scat%(catnum)s        ./Models/res_bkg/sig_%(year)s_cat%(catnum)s.root wsig_13TeV:sig_%(year)s_cat%(catnum)s_res_bkg"

bkg_shape_template="""
shapes      bkg_mass                          ggttres%(m)scat%(catnum)s        ./Models/background/CMS-HGG_multipdf_ggttres%(m)scat%(catnum)s_combined.root multipdf:CMS_hgg_ggttres%(m)scat%(catnum)s_combined_13TeV_bkgshape
shapes      data_obs                          ggttres%(m)scat%(catnum)s        ./Models/background/CMS-HGG_multipdf_ggttres%(m)scat%(catnum)s_combined.root multipdf:roohist_data_mass_ggttres%(m)scat%(catnum)s"""

separator = "-"*129 + "\n"

years = [int(each) for each in sys.argv[4:]]

shapes=""
for catnum in range(nCats):
    for year in years:
      shapes += sig_shape_template % {
        'year': str(year),
        'catnum': str(catnum),
        'm': m
      }
    shapes += bkg_shape_template % {
      'catnum': str(catnum),
      'm': m
    }


years_b = ["combined"]
years_b = years_b + years

datacard=""
datacard+=header
datacard+=shapes
datacard+="\n\n"

datacard+=separator
datacard+= "bin".ljust(20) + "".join([("ggttres%scat%d"%(m, catnum)).ljust(30) for catnum in range(nCats)]) + "\n"
datacard+= "observation".ljust(20) + "".join(["-1".ljust(30) for catnum in range(nCats)]) + "\n"

datacard+=separator
datacard+= "bin".ljust(20) + "".join([("ggttres%scat%d"%(m, catnum)).ljust(30) for catnum in range(nCats) for i in range(len(years_b))]) 
if RES_BKG: datacard += "".join([("ggttres%scat%d"%(m, catnum)).ljust(30) for catnum in range(nCats) for i in range(len(years))])
datacard+= "\n"

datacard+= "process".ljust(20) + "".join(["bkg_mass".ljust(30) if i==0 else ("ggttres%s_%d_hgg"%(m, years_b[i])).ljust(30) for catnum in range(nCats) for i in range(len(years_b))]) 
if RES_BKG: datacard += "".join([("res_bkg_%d"%years[i]).ljust(30) for catnum in range(nCats) for i in range(len(years))]) 
datacard+= "\n"

datacard+= "process".ljust(20) + "".join(["1".ljust(30) if i==0 else ("%d"%(-i)).ljust(30) for catnum in range(nCats) for i in range(len(years_b))]) 
if RES_BKG: datacard += "".join([("%d"%(-i)).ljust(30) for catnum in range(nCats) for i in range(len(years_b), len(years_b)+len(years))])
datacard+= "\n"

datacard+= "rate".ljust(20) + "".join(["1.0".ljust(30) if i==0 else ("%.7f"%(lumiMap[str(years_b[i])]*1000)).ljust(30) for catnum in range(nCats) for i in range(len(years_b))]) 
if RES_BKG: datacard += "".join([("%.7f"%(lumiMap[str(years[i])]*1000)).ljust(30) for catnum in range(nCats) for i in range(len(years))])
datacard+= "\n"

datacard+=separator
datacard+="\n"

from systematics import experimental_systematics
res_bkg_dashes = "".join(["-".ljust(15) for catnum in range(nCats) for i in range(len(years)) ])

for year in years:
  datacard += ("lumi_13TeV_Uncorrelated_%d"%year).ljust(50) + "lnN".ljust(10) + "".join(["-".ljust(15) if years_b[i]!=year else ("%s"%experimental_systematics[0]["value"][str(years_b[i])]).ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ]) 
  if RES_BKG: datacard += res_bkg_dashes
  datacard += "\n"
datacard += "lumi_13TeV_Correlated".ljust(50) + "lnN".ljust(10) + "".join(["-".ljust(15) if i==0 else ("%s"%experimental_systematics[1]["value"][str(years_b[i])]).ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ]) 
if RES_BKG: datacard += res_bkg_dashes
datacard += "\n"
datacard += "lumi_13TeV_Correlated_1718".ljust(50) + "lnN".ljust(10) + "".join(["-".ljust(15) if i==0 else ("%s"%experimental_systematics[2]["value"][str(years_b[i])]).ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ]) 
if RES_BKG: datacard += res_bkg_dashes
datacard += "\n"

if RES_BKG:
  datacard += "res_bkg_norm".ljust(50) + "lnN".ljust(10) + "".join(["-".ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ]) + "".join(["1.500".ljust(15) for catnum in range(nCats) for i in range(len(years)) ]) + "\n"

if DO_SYST:
  systematics = {}
  for year in years:
    sys_year = {}
    for catnum in range(nCats):
      sys_year[catnum], nuisance_names = loadSystematics(systematics_loc, year, catnum, m)
    systematics[year] = sys_year

  sys_names = set()
  for year in years:
    sys_names.update(systematics[year][0].keys())
  sys_names = sorted(sys_names)
  
  for sys_name in sys_names:
    #datacard += sys_name.ljust(40) + "lnN".ljust(10) + "".join(["-".ljust(15) if i==0 else ("%s"%systematics[years_b[i]][catnum][sys_name]).ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ]) + "\n"
    datacard += sys_name.ljust(50) + "lnN".ljust(10) + "".join(["-".ljust(15) if i==0 else ("%s"%getYield(systematics,years_b[i],catnum,sys_name)).ljust(15) for catnum in range(nCats) for i in range(len(years_b)) ])
    if RES_BKG: datacard += res_bkg_dashes
    datacard += "\n"

datacard+=separator
datacard+="\n"

if DO_SYST:
  #nuisance_names = set([name.split("_")[2] for name in systematics[2018][0].keys() if "const" in name])
  for name in nuisance_names:
    datacard += ("nuisance_%s"%name).ljust(40) + "param".ljust(10) + "0.0".ljust(10) + "1.0".ljust(10) + "\n"

datacard+=separator
datacard+="\n"

datacard+= "\n".join(["pdfindex_ggttres%scat%d_combined_13TeV   discrete"%(m, catnum) for catnum in range(nCats)]) + "\n"

datacard+= """signal_scaler rateParam * ggttres* 0.001
nuisance edit freeze signal_scaler"""
if RES_BKG:
  datacard += """
res_bkg_scaler rateParam * res_bkg* 1
nuisance edit freeze res_bkg_scaler"""

print(datacard)